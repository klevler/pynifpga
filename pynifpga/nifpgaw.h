/*
	Copyright (c) 2014 Vincent Paeder
	
	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

/*

 C++ wrapper for NI-FPGA driver.

 This wrapper translates the NI-FPGA C API to a C++ class.

 You need NiFpga.h generated by the NI-FPGA C Interface Generator.

*/

#ifndef _NI_FPGA_WRAP_H_
#define _NI_FPGA_WRAP_H_

#include "NiFpga.h"

class nifpga {
protected:
	NiFpga_Session sessionHandle;
	NiFpga_Status lastStatus;
	bool sessionOpen;
	bool sessionRunning;
	bool driverInitialized;

	bool HandleStatus(NiFpga_Status status);

public:
	nifpga();
	~nifpga();

	NiFpga_Status GetLastStatus();
	char* ErrorDescription(NiFpga_Status status);

	bool Initialize();
	bool Finalize();

	bool Open(char* bitfile, char* signature, char* resource, uint32_t attribute);
	bool Close(uint32_t attribute);

	bool Run(uint32_t attribute);
	bool Abort();
	bool Reset();

	bool Download();

	bool ReadBool(uint32_t indicator, NiFpga_Bool* value);
	bool ReadI8(uint32_t indicator, int8_t* value);
	bool ReadU8(uint32_t indicator, uint8_t* value);
	bool ReadI16(uint32_t indicator, int16_t* value);
	bool ReadU16(uint32_t indicator, uint16_t* value);
	bool ReadI32(uint32_t indicator, int32_t* value);
	bool ReadU32(uint32_t indicator, uint32_t* value);
	bool ReadI64(uint32_t indicator, int64_t* value);
	bool ReadU64(uint32_t indicator, uint64_t* value);

	bool WriteBool(uint32_t control, NiFpga_Bool value);
	bool WriteI8(uint32_t control, int8_t value);
	bool WriteU8(uint32_t control, uint8_t value);
	bool WriteI16(uint32_t control, int16_t value);
	bool WriteU16(uint32_t control, uint16_t value);
	bool WriteI32(uint32_t control, int32_t value);
	bool WriteU32(uint32_t control, uint32_t value);
	bool WriteI64(uint32_t control, int64_t value);
	bool WriteU64(uint32_t control, uint64_t value);

	bool ReadArrayBool(uint32_t indicator, NiFpga_Bool* values, size_t size);
	bool ReadArrayI8(uint32_t indicator, int8_t* values, size_t size);
	bool ReadArrayU8(uint32_t indicator, uint8_t* values, size_t size);
	bool ReadArrayI16(uint32_t indicator, int16_t* values, size_t size);
	bool ReadArrayU16(uint32_t indicator, uint16_t* values, size_t size);
	bool ReadArrayI32(uint32_t indicator, int32_t* values, size_t size);
	bool ReadArrayU32(uint32_t indicator, uint32_t* values, size_t size);
	bool ReadArrayI64(uint32_t indicator, int64_t* values, size_t size);
	bool ReadArrayU64(uint32_t indicator, uint64_t* values, size_t size);

	bool WriteArrayBool(uint32_t control, const NiFpga_Bool* values, size_t size);
	bool WriteArrayI8(uint32_t control, const int8_t* values, size_t size);
	bool WriteArrayU8(uint32_t control, const uint8_t* values, size_t size);
	bool WriteArrayI16(uint32_t control, const int16_t* values, size_t size);
	bool WriteArrayU16(uint32_t control, const uint16_t* values, size_t size);
	bool WriteArrayI32(uint32_t control, const int32_t* values, size_t size);
	bool WriteArrayU32(uint32_t control, const uint32_t* values, size_t size);
	bool WriteArrayI64(uint32_t control, const int64_t* values, size_t size);
	bool WriteArrayU64(uint32_t control, const uint64_t* values, size_t size);

	bool ReserveIrqContext(NiFpga_IrqContext* context);
	bool UnreserveIrqContext(NiFpga_IrqContext context);
	bool WaitOnIrqs(NiFpga_IrqContext context, uint32_t irqs, uint32_t timeout, uint32_t* irqsAsserted, NiFpga_Bool* timedOut);
	bool AcknowledgeIrqs(uint32_t irqs);

	bool ConfigureFifo(uint32_t fifo, size_t depth);
	bool ConfigureFifo(uint32_t fifo, size_t requestedDepth, size_t* actualDepth);
	bool StartFifo(uint32_t fifo);
	bool StopFifo(uint32_t fifo);
	
	bool ReadFifoBool(uint32_t fifo, NiFpga_Bool* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoI8(uint32_t fifo, int8_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoU8(uint32_t fifo, uint8_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoI16(uint32_t fifo, int16_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoU16(uint32_t fifo, uint16_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoI32(uint32_t fifo, int32_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoU32(uint32_t fifo, uint32_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoI64(uint32_t fifo, int64_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);
	bool ReadFifoU64(uint32_t fifo, uint64_t* data, size_t numberOfElements, uint32_t timeout, size_t* elementsRemaining);

	bool WriteFifoBool(uint32_t fifo, NiFpga_Bool* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoI8(uint32_t fifo, int8_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoU8(uint32_t fifo, uint8_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoI16(uint32_t fifo, int16_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoU16(uint32_t fifo, uint16_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoI32(uint32_t fifo, int32_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoU32(uint32_t fifo, uint32_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoI64(uint32_t fifo, int64_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);
	bool WriteFifoU64(uint32_t fifo, uint64_t* data, size_t numberOfElements, uint32_t timeout, size_t* emptyElementsRemaining);

	bool AcquireFifoReadElementsBool(uint32_t fifo, NiFpga_Bool** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsI8(uint32_t fifo, int8_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsU8(uint32_t fifo, uint8_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsI16(uint32_t fifo, int16_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsU16(uint32_t fifo, uint16_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsI32(uint32_t fifo, int32_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsU32(uint32_t fifo, uint32_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsI64(uint32_t fifo, int64_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoReadElementsU64(uint32_t fifo, uint64_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);

	bool AcquireFifoWriteElementsBool(uint32_t fifo, NiFpga_Bool** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsI8(uint32_t fifo, int8_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsU8(uint32_t fifo, uint8_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsI16(uint32_t fifo, int16_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsU16(uint32_t fifo, uint16_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsI32(uint32_t fifo, int32_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsU32(uint32_t fifo, uint32_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsI64(uint32_t fifo, int64_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);
	bool AcquireFifoWriteElementsU64(uint32_t fifo, uint64_t** elements, size_t elementsRequested, uint32_t timeout, size_t* elementsAcquired, size_t* elementsRemaining);

	bool ReleaseFifoElements(uint32_t fifo, size_t elements);
	bool GetPeerToPeerFifoEndpoint(uint32_t fifo, uint32_t* endpoint);
};

#endif